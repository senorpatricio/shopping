System.register(["angular2/core", './personal-link-form', 'angular2/router', '../shared/menu.component', '../shared/menu.service'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1, personal_link_form_1, router_1, menu_component_1, menu_service_1;
    var RecipientTypeComponent;
    return {
        setters:[
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (personal_link_form_1_1) {
                personal_link_form_1 = personal_link_form_1_1;
            },
            function (router_1_1) {
                router_1 = router_1_1;
            },
            function (menu_component_1_1) {
                menu_component_1 = menu_component_1_1;
            },
            function (menu_service_1_1) {
                menu_service_1 = menu_service_1_1;
            }],
        execute: function() {
            RecipientTypeComponent = (function () {
                // get diagnostic() { return JSON.stringify(this.model); }
                function RecipientTypeComponent(_menuService) {
                    this._menuService = _menuService;
                    this.recipientTypes = ["Select Recipient Type", "Personal Link", "Public Link"];
                    this.checkmark = false;
                    this.personalForm = false;
                    this.publicForm = false;
                    this.step = 3;
                    this.states = ["AA", "AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA", "GU", "HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME", "MH", "MI", "MN", "MO", "MS", "MT", "NC", "ND", "NE", "NH", "NJ", "NM", "NV", "NY", "OH", "OK", "OR", "PA", "PR", "PW", "RI", "SC", "SD", "TN", "TX", "UT", "VA", "VI", "VT", "WA", "WI", "WV", "WY"];
                    this.model = new personal_link_form_1.PersonalLink(1, "", "", "", "", "", "", this.states[0], "", "", "", "");
                    this.submitted = false;
                    this.active = true;
                }
                RecipientTypeComponent.prototype.onSubmit = function () { this.submitted = true; };
                RecipientTypeComponent.prototype.newPersonalLink = function () {
                    var _this = this;
                    this.active = false;
                    setTimeout(function () { return _this.active = true; }, 0);
                };
                RecipientTypeComponent.prototype.newPublicLink = function () {
                    var _this = this;
                    this.active = false;
                    setTimeout(function () { return _this.active = true; }, 0);
                };
                RecipientTypeComponent.prototype.onChecked = function (checked, flag) {
                    if (flag === true) {
                        this.checked = checked;
                    }
                    else {
                        this.checked = checked;
                    }
                };
                RecipientTypeComponent.prototype.onChange = function (selectedRecipientType) {
                    this._menuService.checkMenu(3, "three");
                    if (selectedRecipientType === this.recipientTypes[1]) {
                        //change menu
                        this.personalForm = true;
                        this.publicForm = false;
                        console.log(selectedRecipientType);
                    }
                    else if (selectedRecipientType === this.recipientTypes[2]) {
                        this.publicForm = true;
                        this.personalForm = false;
                        console.log(selectedRecipientType);
                    }
                    else {
                        this.publicForm = false;
                        this.personalForm = false;
                    }
                };
                RecipientTypeComponent.prototype.ngAfterViewInit = function () {
                    this._menuService.checkMenu(3, "three");
                    //  if(this.step === 3) {
                    //  let activeMenu = document.querySelector('li.active');
                    //   activeMenu.classList.remove('active');
                    //   activeMenu.classList.add('unlocked');
                    //   activeMenu.nextElementSibling.classList.add('active'); 
                    //   activeMenu.nextElementSibling.classList.add('unlocked');   
                    //   console.log("Step 3!");
                    // }
                };
                RecipientTypeComponent.prototype.checkMarking = function () {
                    this.checkmark = true;
                };
                RecipientTypeComponent.prototype.ngOnInit = function () {
                    this._menuService.checkMenu(3, "three");
                };
                RecipientTypeComponent = __decorate([
                    core_1.Component({
                        selector: 'recipient-type',
                        // template: `
                        //   <menu-app></menu-app>
                        //     <p id="link-question">Is this a personal or a public link?</p>
                        //     <div class="form-group select-box chooser">
                        //         <select (change)="onChange($event.target.value)" name="RecipientType" id="recipient-type" class="personal-link-input">
                        //           <option *ngFor="let recipientType of recipientTypes" [value]="recipientType" >
                        //             {{recipientType}}   
                        //           </option>
                        //           <div> selection= {{selectedRecipientType}}</div>
                        //         </select>
                        //     </div> 
                        // `,
                        templateUrl: "app/shared/recipient-type.component.html",
                        styles: ["\n        nav.hideMenu {\n            display: block;\n        }\n        #link-question {\n            font-size: 0.875em;\n            width: 95%;\n            margin: 20px auto 10px;\n        }\n        #recipient-type {\n            margin-top: 10px;\n        }\n        .intro-text {\n            margin-left: 12px;\n            font-size: 0.875em;\n            width: 93%;\n            line-height: initial;    \n        }\n        .personal-link-input {\n            border: none;\n            box-shadow: none;\n            border-radius: 0;\n            background-color: #f1f1f1;\n            width: 95%;\n            margin: 10px auto;       \n        }\n        .consent {\n            margin: 20px auto 0;\n            width: 95%;\n            color: #999;\n            line-height: initial;\n            letter-spacing: .2px;\n            font-size: .875rem;\n        }\n        .chooser {\n            padding: 0;\n        }\n        .chooser select {\n            color: #ccc;\n        }\n        hr {\n            border-top: 2px solid #ccc;\n            width: 95%;\n            margin: 0 auto;\n            \n        }\n        #link-question {\n            font-size: 0.875em;\n            width: 95%;\n            margin: 20px auto 10px;\n        }\n        #recipient-type {\n            margin-top: 10px;\n        }      \n        .personal-link-input {\n            border: none;\n            box-shadow: none;\n            border-radius: 0;\n            background-color: #f1f1f1;\n            width: 95%;\n            margin: 10px auto;   \n        }\n        .chooser {\n            padding: 0;\n        }\n        .chooser select {\n            color: #999;\n        }\n        #share-text {\n            font-weight: 600;\n            margin-left: 10px;\n            margin-top: 10px;\n            color: #AAAAAA;\n        }\n        .copy-text {\n            margin-left: 10px;\n            margin-bottom: 0;\n            line-height: 1.1;\n        }\n        #copy-button {\n            position: absolute;\n            text-align: center;\n            right: 8px;\n            top: 72px;\n            background-color: #B19B65;\n            width: 80px;\n            height: 38px;\n            padding-top: 9px;\n            color: #fff;\n            font-size: small;\n        }\n        .social-media-section {\n            width: 95%;\n            margin-bottom: 10px;\n        }\n        #left-icon {\n            margin-left: 10px;\n        }\n        .social-icon {\n            margin: 8px 8px 8px 0;\n        }\n        #send-button {\n            position: absolute;\n            text-align: center;\n            right: 8px;\n            top: 238px;\n            background-color: #B19B65;\n            width: 80px;\n            height: 38px;\n            padding-top: 9px;\n            color: #fff;\n            font-size: small;\n        }\n<<<<<<< HEAD\n        .unchecked {\n            position: relative;\n            float: left;\n            background: url('/app/assets/img/checkbox.png') no-repeat 0 -21px;\n            width: 16px;\n            height: 16px;\n            margin-right: 5px;\n        }\n        .way-checked {\n            position: relative;\n            float: left;\n            background: url('/app/assets/img/checkbox.png') no-repeat 0 0;\n            width: 16px;\n            height: 16px;\n            margin-right: 5px;\n        }\n    "],
                        outputs: ['publicForm', 'personalForm'],
                        directives: [router_1.ROUTER_DIRECTIVES, menu_component_1.MenuComponent],
                        providers: [menu_service_1.MenuService]
                    }), 
                    __metadata('design:paramtypes', [menu_service_1.MenuService])
                ], RecipientTypeComponent);
                return RecipientTypeComponent;
            }());
            exports_1("RecipientTypeComponent", RecipientTypeComponent);
        }
    }
});
//# sourceMappingURL=recipient-type.component.js.map